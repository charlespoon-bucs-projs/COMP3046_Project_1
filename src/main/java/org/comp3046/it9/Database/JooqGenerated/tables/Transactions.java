/*
 * This file is generated by jOOQ.
*/
package org.comp3046.it9.Database.JooqGenerated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.comp3046.it9.Database.JooqGenerated.DefaultSchema;
import org.comp3046.it9.Database.JooqGenerated.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactions extends TableImpl<Record> {

    private static final long serialVersionUID = -913203055;

    /**
     * The reference instance of <code>Transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>Transactions.TID</code>.
     */
    public final TableField<Record, Integer> TID = createField("TID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Transactions.CustomerId</code>.
     */
    public final TableField<Record, Integer> CUSTOMERID = createField("CustomerId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Transactions.MovieId</code>.
     */
    public final TableField<Record, Integer> MOVIEID = createField("MovieId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Transactions.Seat</code>.
     */
    public final TableField<Record, String> SEAT = createField("Seat", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Transactions.Total</code>.
     */
    public final TableField<Record, Integer> TOTAL = createField("Total", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Transactions.NumberOfTickets</code>.
     */
    public final TableField<Record, Integer> NUMBEROFTICKETS = createField("NumberOfTickets", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Transactions.IsCancelled</code>.
     */
    public final TableField<Record, Integer> ISCANCELLED = createField("IsCancelled", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>Transactions</code> table reference
     */
    public Transactions() {
        this("Transactions", null);
    }

    /**
     * Create an aliased <code>Transactions</code> table reference
     */
    public Transactions(String alias) {
        this(alias, TRANSACTIONS);
    }

    private Transactions(String alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Transactions(String alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PK_TRANSACTIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.PK_TRANSACTIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_TRANSACTIONS_CUSTOMER_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transactions as(String alias) {
        return new Transactions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(name, null);
    }
}
